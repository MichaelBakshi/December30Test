1. POCO הוא אובייקט שמכיל את כל שדות המידע של האובייקט
לשני אובייקטים זהים יש HASHCODE 
זהה. ומכיוון ש POCO
הוא Plain Old C# Object, 
הדרך שלנו להשוות בין אובייקטים של POCO 
היא לממש פונקציות  EQUALS AND GETHASCODE 

2. א.  pimary key הוא מפתח ייחודי בטבלה שמיוחס לכל רושמה. 
יכול להיות רק PRIMARY KEY 
אחד בטבלה , אבל המפתח עצמו בטבלה יכול להיות מורכב גם מעמודה אחת וכך גם מכמה עמודות:
CONSTRAINT_ID_NAME PRIMARY KEY (Student_ID, Student_name)
בדוגמה הזו, גם שדה Student_ID
וגם  Student_name
ביחד מרכיבים PRIMARY KEY
זאת אומרת השילוב שניהם חייב להיות ייחודי ולא יכול להיות NULL

ב.  FOREIGN KEY מצביע על
PRIMARY KEY  בטבלה אחרת
חייב להיות ייחודי: אפשר להגדיר כמה עמודות כ FOREIGH KEY
אבל רק בתנאי שהמפתח בכל אחת מהן  יתייחס לטבלאות שונות

באחד לאחד לכל רשומה בטבלה אחת יכולה להיות רק רשומה אחת בטבלה השנייה. למשל, שם של תלמיד ומספר התלמיד. גם בכיוון ההפוך, לכל מספר תלמיד שייך רק שם אחד   .ג   
באחד לרבים, לרשומה אחת יכולות להיות כמה רשומות בטבלה השנייה. למשל, ללקוח אחד יכולות להיות כמה רשומות בטבלת הזמנות
ברבים לרבים, לכם רשומה בטבלה אחת, יכולות להיות כמה רשומות בטבלה השנייה וכך גם להיפך, לכל רשומה בטבלה השנייה יכולות להשתייך כמה רשומות בטבלה הראשונה. למשל, סטודנט, יכול להיות רשום לכמה קורסים, וכל לרשומה בטבלצת קורסים יש כמה רשומות של סטודנטים


ד.  UNIQUE  הוא CONSTRAINT
שממחייב כל רשומה להיות ייחודית. 
מסמנים את שם העמודה בטבלה, ולאחר מכן:
indexes/keys - > general:Columns -> שם של העמודה - > is unique? - > yes

3.  STORED PROCEDURE הוא בעצם יחידה לוגית. 
לכן במידה ואנחנו רוצים שוב ושוב להריץ את אותה השאילתא או לבצע שוב ושוב את אותה הנמיפולציה עם הנתונים, כדאי להכין את קטע הקוד שחוזר על עצמו בתור STORED PROCEDURE
זה יחסוך לנו צורך לחזור על אותו קטע קוד בכל פעם

4. תפקיד של CONNECTION STRING - 
להגדיר את המיקום של בסיס נתונים , בין אם זה כתובת של בסיס נתונים שנמצא במחשב או כתובת חיבור לשרת שם נמצא בסיס הנתונים. בנוסף, תנאי התחברות, כמו דרישה לשם משתמש או סיסמא. 
כדאי לשמור את כתובת החיבור לבסיס נתונים בקובץ חיצוני ולהפנות אליו מתוך מחלקה עצמאית בקוד. בכזה מקרה, אין צורך לשנות את הקוד כל פעם שרוצים לעבוד על בסיס נתונים אחר.

5.   מדובר בפעולה של הצבה בין טבלאות.
inner join - יוחזרו רק רשומות שיש להם שדה מידע מלא בשתי הטבלאות המוצלבות
LEFT JOIN - חייב להיות מידע בטבלה השמאלית (תלוי בסדר כתיבת הטבלאות בפעולה) ולא מחייב שיהיה מידע בטבלה הימנית
RIGHT JOIN - חייב להיות מידע בטבלה הימנית ולא מחייב שיהיה מידע בטבלה השמאלית
FULL OUTER JOIN - לפחות באחת מן הטבלאות חייב להיות מידע ברשומה. זאת אומרתף השדה יכול להיות ריק או בטבלה הימנית או השמאלית לחלופין

6.   LINQ (Language Integrated Query)
זה תחביר שמשמש אותנו לכתיבת שאילתות לבסיסי נתונים שונים.
היתרונות שלו: 
-כמות קוד : הכתיבה של קוד קצרה יותר
- השאילתה עצמה יותר ברורה להבנה למי שוקר את הקוד
 - הואובייקטים נבדקים כבר בזמן הקומפילציה

7. LOGGER הוא קובץ אליו נרשמים כל האירועים שאני רוצה שיהיהו מתועדים
בזמן השימוש בקוד.
אלה יכולים להיות גם תיעודים של פעולות המשתמש, גם התוצאות שהמשתמש קיבל או שגיאות בקוד, פעולות שלא התבצעו ואנחנו נרצה לבדוק מאיזו סיבה. למשל, המשתמש ניסה להכניס נתון לא חוקי לשדה מסוים

8.   PARTITION BY - זו דרך לקבל חתך מידע מסוים מבסיס נתונים מבלי ליצור לשם כך שאילתא נפרדת.   למשל, אנחנו יכולים לסדר את המידע בטבלה לפי נתונים בעמודה מסוימת. 